; калькулятор для суммы и разности 
; одз -2^15 <= FINALSUM <= 2^15 - 1
; одз -2^15 <= FIRSTNUM <= 2^15 - 1 (но их сумма и разность не должны выходить за пределы одз CURRENTNUM)
; одз -2^15 <= SECONDNUM <= 2^15 - 1
;	-32768		32767
ORG 0x10

THOUSANDS10: WORD 10000
THOUSANDS: WORD 1000
HUNDREDS: WORD 100
TENS: WORD 10
ONES: WORD 1

CURRENTPOS:	WORD 0x0050 ; текущая позиция
FLAG: WORD 0x0000 ; флаг для отображения отрицательных чисел
SIGN: WORD ? ; позиция, в которой будет отображен знак
TEMP: WORD 0xFFFF ; величина текущего разряда

FIRSTNUM: WORD 0
SECONDNUM: WORD 0
FINALSUM: WORD  ?
CURRENTNUM: WORD ?

ORG 0x1C
BEGIN:
	LD #0x0F
	OUT 0x14
	LD #0x1F
	OUT 0x14
	LD #0x2F
	OUT 0x14
	LD #0x3F
	OUT 0x14
	LD #0x4F
	OUT 0x14
	LD #0x5F
	OUT 0x14
	LD #0x6F
	OUT 0x14
	LD #0x7F
	OUT 0x14

MAIN: 
	LD FIRSTNUM
	ADD SECONDNUM
	ST CURRENTNUM
	BVS STOP ; переполнение
	BNC PLUS  ; переход если положительное

MINUS: 	
	LD #1
	ST FLAG
	LD CURRENTNUM
	NEG
	ST CURRENTNUM

PLUS:

STEP1:	
	LD CURRENTPOS
	SUB #0x10
	ST CURRENTPOS
	LD CURRENTNUM
	CMP THOUSANDS10
	BNC CALCTHOUSANDS10

STEP2: 	
	LD CURRENTPOS 
	SUB #0x10
	ST CURRENTPOS
	LD CURRENTNUM
	CMP THOUSANDS
	BNC CALCTHOUSANDS

STEP3: 	
	LD CURRENTPOS
	SUB #0x10
	ST CURRENTPOS
	LD CURRENTNUM
	CMP HUNDREDS
	BNC CALCHUNDREDS

STEP4: 	
	LD CURRENTPOS
	SUB #0x10
	ST CURRENTPOS
	LD CURRENTNUM
	CMP TENS
	BNC CALCTENS

STEP5: 	
	LD CURRENTPOS
	SUB #0x10
	ST CURRENTPOS
	LD CURRENTNUM
	JUMP $CALCONES

FINISH:	
	LD $FLAG
	BZS ENDING 
	LD $SIGN
	OUT 0x14
	LD #0x50
	ST CURRENTPOS
	CLA
	ST FLAG
	ST $SIGN
	DEC
	ST $TEMP
ENDING: RET


	

CALCTHOUSANDS10:
	LD #0x5A
	ST SIGN
	LD TEMP
	INC
	ST TEMP
	LD CURRENTNUM	
	SUB THOUSANDS10
	ST CURRENTNUM
	BNC CALCTHOUSANDS10
	ADD THOUSANDS10
	ST CURRENTNUM
	LD TEMP
	ADD CURRENTPOS
	OUT 0x14
	CLA
	DEC
	ST TEMP
	CLA
	LD #0x00
	OUT 0x14
	LD #0x10
	OUT 0x14
	LD #0x20
	OUT 0x14
	LD #0x30
	OUT 0x14
	JUMP STEP2

CALCTHOUSANDS:
	LD SIGN
	BZC CONT2
	LD #0x4A
	ST $SIGN
CONT2: 	LD TEMP
	INC
	ST TEMP
	LD CURRENTNUM	
	SUB $THOUSANDS
	ST $CURRENTNUM
	BNC CALCTHOUSANDS
	ADD $THOUSANDS
	ST $CURRENTNUM
	LD $TEMP
	ADD $CURRENTPOS
	OUT 0x14
	CLA
	DEC
	ST $TEMP
	LD #0x00
	OUT 0x14
	LD #0x10
	OUT 0x14
	LD #0x20
	OUT 0x14
	JUMP STEP3

STOP:
	LD #0x0A
	OUT 0x14
	LD #0x1A
	OUT 0x14
	LD #0x2A
	OUT 0x14
	LD #0x3A
	OUT 0x14
	LD #0x4A
	OUT 0x14
	LD #0x5A
	OUT 0x14
	LD #0x6A
	OUT 0x14
	LD #0x7A
	OUT 0x14
	HLT 

CALCHUNDREDS:
	LD $SIGN
	BZC CONT3
	LD #0x3A
	ST $SIGN
CONT3: 	LD $TEMP	
	INC
	ST $TEMP 
	LD $CURRENTNUM 
	SUB $HUNDREDS
	ST $CURRENTNUM
	BNC CALCHUNDREDS
	ADD $HUNDREDS
	ST $CURRENTNUM	
	LD $TEMP
	ADD $CURRENTPOS
	OUT 0x14
	CLA
	DEC
	ST $TEMP
	LD #0x00
	OUT 0x14
	LD #0x10
	OUT 0x14
	JUMP STEP4

CALCTENS: 	
	LD $SIGN
	BZC COUNT4
	LD #0x2A
	ST $SIGN
COUNT4:	LD $TEMP
	INC
	ST $TEMP
	LD $CURRENTNUM
	SUB $TENS
	ST $CURRENTNUM
	BNC CALCTENS
	ADD $TENS
	ST $CURRENTNUM
	LD $TEMP
	ADD $CURRENTPOS
	OUT 0x14
	CLA
	DEC 
	ST $TEMP
	LD #0x00
	OUT 0x14
	JUMP $STEP5

CALCONES: 	LD $SIGN
	BZC CONT5
	LD #0x1A
	ST $SIGN
CONT5:	LD $CURRENTNUM
	ADD $CURRENTPOS
	OUT 0x14
	JUMP $FINISH

READY: WORD 1
FLAGFORTRANS: WORD ?
TEMPFORTRANS: WORD ? ; содержит текущий символ, поступивший с ВУ-9
CURNUMBER: WORD ? 
LEN: WORD ?
LENDUBL: WORD ? ; Дублирование длины
FIRSTDIGIT: WORD ?
SECONDDIGIT: WORD ?
THIRDDIGIT: WORD ?
FOURTHDIGIT: WORD ?
FIFTHDIGIT: WORD ?

START: 	
	LD #0x0F
	OUT 0x14
	LD #0x1F
	OUT 0x14
	LD #0x2F
	OUT 0x14
	LD #0x3F
	OUT 0x14
	LD #0x4F
	OUT 0x14
	LD #0x5F
	OUT 0x14
	LD #0x6F
	OUT 0x14
	LD #0x7F
	OUT 0x14
SIGNLOOP1:
	IN 0x1D
	AND #0x40
	BZS SIGNLOOP1
	IN 0x1C
	ST TEMPFORTRANS
	

AFTERFIRSTNUM:
	LD #0x0F
	OUT 0x14
	LD #0x1F
	OUT 0x14
	LD #0x2F
	OUT 0x14
	LD #0x3F
	OUT 0x14
	LD #0x4F
	OUT 0x14
	LD #0x5F
	OUT 0x14
	LD #0x6F
	OUT 0x14
	LD #0x7F
	OUT 0x14

	LD TEMPFORTRANS
	CMP #10		; если цифра переходим к циклу выборки слагаемого
	BNS NUMOUTaftNum

	CMP #11		; если плюс переходим к циклу выборки слагаемого
	BZS NUMOUT1

	CMP #10		; если не минус то выходим из программы
	BZC STOP
	CLA
	OUT 0x14
	LD #0x1A
	OUT 0x14
	LD #1
	ST $FLAGFORTRANS

NUMOUT1:
	IN 0x1D
	AND #0x40
	BZS NUMOUT1
	IN 0x1C
	ST TEMPFORTRANS
	CMP #10
	BNC TRANSFERTO10SS

NUMOUTaftNum:
	ST FIRSTDIGIT
	OUT 0x14

	LD #00
	ST LEN

	LD FLAGFORTRANS
	BZS NUMOUT2
	LD #1A
	OUT 0x14

NUMOUT2:
	IN 0x1D
	AND #0x40
	BZS NUMOUT2
	IN 0x1C
	ST TEMPFORTRANS
	CMP #10
	BNC TRANSFERTO10SS
	ST SECONDDIGIT
	OUT 0x14
	LD #0x10
	ADD FIRSTDIGIT
	OUT 0x14
	
	LD #01
	ST LEN
	
	LD FLAGFORTRANS
	BZS NUMOUT3
	LD #2A
	OUT 0x14

NUMOUT3:
	IN 0x1D
	AND #0x40
	BZS NUMOUT3
	IN 0x1C
	ST TEMPFORTRANS
	CMP #10
	BNC TRANSFERTO10SS
	ST THIRDDIGIT
	OUT 0x14

	LD #02
	ST LEN

	LD #0x10
	ADD SECONDDIGIT
	OUT 0x14
	LD #0x20
	ADD FIRSTDIGIT
	OUT 0x14

	LD FLAGFORTRANS
	BZS NUMOUT4
	LD #3A
	OUT 0x14

NUMOUT4:
	IN 0x1D
	AND #0x40
	BZS NUMOUT4
	IN 0x1C
	ST TEMPFORTRANS
	CMP #10
	BNC TRANSFERTO10SS
	ST FOURTHDIGIT
	OUT 0x14
	
	LD #03
	ST LEN

	LD #0x10
	ADD THIRDDIGIT
	OUT 0x14
	LD #0x20
	ADD SECONDDIGIT
	OUT 0x14
	LD #0x30
	ADD FIRSTDIGIT
	OUT 0x14

	LD $FLAGFORTRANS
	BZS NUMOUT5
	LD #4A
	OUT 0x14

NUMOUT5:
	IN 0x1D
	AND #0x40
	BZS NUMOUT5
	IN 0x1C
	ST $TEMPFORTRANS
	CMP #10
	BNC TRANSFERTO10SS
	ST $FIFTHDIGIT
	OUT 0x14
	
	LD #04
	ST $LEN

	LD #0x10
	ADD $FOURTHDIGIT
	OUT 0x14
	LD #0x20
	ADD $THIRDDIGIT
	OUT 0x14
	LD #0x30
	ADD $SECONDDIGIT
	OUT 0x14
	LD #0x40
	ADD $FIRSTDIGIT
	OUT 0x14

	LD $FLAGFORTRANS
	BZS TRANSFERTO10SS
	LD #5A
	OUT 0x14

	
	
	

TRANSFERTO10SS:
	LD $LEN
	ST $LENDUBL
TRANSFIRST:
	BZS CONTINUE
	LD $FIRSTDIGIT	
	ASL
	ASL
	ADD $FIRSTDIGIT
	ASL
	ST $FIRSTDIGIT
	LOOP $LEN
	JUMP TRANSFIRST
	LD $LENDUBL
	DEC
	ST $LENDUBL
	ST $LEN

TRANSSECOND:
	BZS CONTINUE
	LD $SECONDDIGIT	
	ASL
	ASL
	ADD $SECONDDIGIT
	ASL
	ST $SECONDDIGIT
	LOOP $LEN
	JUMP TRANSSECOND
	LD $LENDUBL
	DEC
	ST $LENDUBL
	ST $LEN
TRANSTHIRD:
	BZS CONTINUE
	LD $THIRDDIGIT	
	ASL
	ASL
	ADD $THIRDDIGIT
	ASL
	ST $THIRDDIGIT
	LOOP $LEN
	JUMP TRANSTHIRD
	LD $LENDUBL
	DEC
	ST $LENDUBL
	ST $LEN

TRANSFOURTH:
	BZS CONTINUE
	LD $FOURTHDIGIT	
	ASL
	ASL
	ADD $FOURTHDIGIT
	ASL
	ST $FOURTHDIGIT
	LOOP $LEN
	JUMP TRANSFOURTH
	LD $LENDUBL
	DEC
	ST $LENDUBL
	ST $LEN

TRANSFIFTH:
	BZS CONTINUE
	LD $FIFTHDIGIT
	ASL
	ASL
	ADD $FIFTHDIGIT
	ASL
	ST $FIFTHDIGIT
	LOOP $LEN
	JUMP TRANSFIFTH
	LD $LENDUBL
	DEC
	ST $LENDUBL
	ST $LEN
CONTINUE: 
	;CALL $BEGIN
	LD $CURNUMBER
	ADD $FIRSTDIGIT
	ADD $SECONDDIGIT
	ADD $THIRDDIGIT
	ADD $FOURTHDIGIT
	ADD $FIFTHDIGIT
	ST $CURNUMBER
	LD $FLAGFORTRANS
	BZS CONTINUE2
	LD $CURNUMBER
	NEG
	ST $CURNUMBER
CONTINUE2:	LD $READY
	CMP #1
	BZC SEC
	LD $CURNUMBER
	ST $FIRSTNUM
	CLA
	ST $CURNUMBER
	ST $FLAGFORTRANS
	ST $FIRSTDIGIT
	ST $SECONDDIGIT
	ST $THIRDDIGIT
	ST $FOURTHDIGIT
	ST $FIFTHDIGIT
	ST $LEN
	ST $LENDUBL
	LD #2
	ST $READY
	LD $TEMPFORTRANS
	CMP #0xA
	
	BNC SECSIGNISMINUSORPLUS
	JUMP $SIGNLOOP1
SECSIGNISMINUSORPLUS:JUMP $AFTERFIRSTNUM

SEC: 	LD $CURNUMBER
	ST $SECONDNUM
LASTPART:	
	LD $TEMPFORTRANS
	CMP 10
	BNS DOIT
	JUMP DOIT2
DOIT:	IN 0x1D
	AND #0x40
	BZS LASTPART
	IN 0x1C
DOIT2:	CMP #15
	BZC STOPPY
	CALL $BEGIN
	HLT
STOPPY:	JUMP $STOP